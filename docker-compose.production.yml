version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: icpac-booking-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-icpac_bookings}
      POSTGRES_USER: ${POSTGRES_USER:-icpac_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
      - ./icpac-booking-backend/setup_postgres.sh:/docker-entrypoint-initdb.d/setup_postgres.sh
    networks:
      - icpac-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-icpac_user} -d ${POSTGRES_DB:-icpac_bookings}"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Redis Cache & Session Store
  redis:
    image: redis:7-alpine
    container_name: icpac-booking-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD} --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - icpac-network
    healthcheck:
      test: ["CMD", "redis-cli", "auth", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Django Backend API
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: icpac-booking-backend
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      # Production Settings
      DEBUG: 'False'
      SECRET_KEY: ${SECRET_KEY}
      ALLOWED_HOSTS: ${ALLOWED_HOSTS:-localhost,127.0.0.1,booking.icpac.net}
      
      # Database Configuration
      DATABASE_URL: postgresql://${POSTGRES_USER:-icpac_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-icpac_bookings}
      
      # Redis Configuration
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
      
      # Email Configuration
      EMAIL_BACKEND: ${EMAIL_BACKEND:-django.core.mail.backends.smtp.EmailBackend}
      EMAIL_HOST: ${EMAIL_HOST:-smtp.gmail.com}
      EMAIL_PORT: ${EMAIL_PORT:-587}
      EMAIL_USE_TLS: ${EMAIL_USE_TLS:-True}
      EMAIL_HOST_USER: ${EMAIL_HOST_USER}
      EMAIL_HOST_PASSWORD: ${EMAIL_HOST_PASSWORD}
      DEFAULT_FROM_EMAIL: ${DEFAULT_FROM_EMAIL:-noreply@icpac.net}
      
      # CORS Settings
      CORS_ALLOW_ALL_ORIGINS: 'False'
      FRONTEND_URL: ${FRONTEND_URL:-https://booking.icpac.net}
      
      # Security Settings
      SECURE_SSL_REDIRECT: 'True'
      SESSION_COOKIE_SECURE: 'True'
      CSRF_COOKIE_SECURE: 'True'
      SECURE_BROWSER_XSS_FILTER: 'True'
      SECURE_CONTENT_TYPE_NOSNIFF: 'True'
      
      # Performance Settings
      CONN_MAX_AGE: 60
      
    volumes:
      - media_files:/app/media
      - static_files:/app/staticfiles
      - ./logs:/app/logs
    networks:
      - icpac-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/auth/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Celery Worker for Background Tasks
  celery:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: icpac-booking-celery
    restart: unless-stopped
    depends_on:
      backend:
        condition: service_healthy
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      DEBUG: 'False'
      SECRET_KEY: ${SECRET_KEY}
      DATABASE_URL: postgresql://${POSTGRES_USER:-icpac_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-icpac_bookings}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
      C_FORCE_ROOT: 1
    command: celery -A icpac_booking worker --loglevel=info --concurrency=4 --max-tasks-per-child=1000
    volumes:
      - media_files:/app/media
      - ./logs:/app/logs
    networks:
      - icpac-network
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Celery Beat for Scheduled Tasks
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: icpac-booking-celery-beat
    restart: unless-stopped
    depends_on:
      backend:
        condition: service_healthy
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      DEBUG: 'False'
      SECRET_KEY: ${SECRET_KEY}
      DATABASE_URL: postgresql://${POSTGRES_USER:-icpac_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-icpac_bookings}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
      C_FORCE_ROOT: 1
    command: celery -A icpac_booking beat --loglevel=info --scheduler=django_celery_beat.schedulers:DatabaseScheduler
    volumes:
      - ./logs:/app/logs
      - celery_beat_data:/app/celerybeat-schedule
    networks:
      - icpac-network
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Nginx Reverse Proxy
  nginx:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: icpac-booking-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.production.conf:/etc/nginx/conf.d/default.conf
      - static_files:/var/www/static:ro
      - media_files:/var/www/media:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
      - certbot_data:/var/www/certbot:ro
      - certbot_certs:/etc/letsencrypt:ro
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - icpac-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Certbot for SSL certificates
  certbot:
    image: certbot/certbot:latest
    container_name: icpac-booking-certbot
    volumes:
      - certbot_certs:/etc/letsencrypt
      - certbot_data:/var/www/certbot
    command: certonly --webroot --webroot-path=/var/www/certbot --email ${SSL_EMAIL} --agree-tos --no-eff-email -d ${DOMAIN_NAME}
    depends_on:
      - nginx
    networks:
      - icpac-network

  # Backup Service
  backup:
    image: postgres:15-alpine
    container_name: icpac-booking-backup
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-icpac_bookings}
      POSTGRES_USER: ${POSTGRES_USER:-icpac_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      BACKUP_KEEP_DAYS: ${BACKUP_KEEP_DAYS:-7}
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh
    command: /bin/sh -c "chmod +x /backup.sh && crond -f"
    networks:
      - icpac-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  static_files:
    driver: local
  media_files:
    driver: local
  celery_beat_data:
    driver: local
  certbot_certs:
    driver: local
  certbot_data:
    driver: local

networks:
  icpac-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16